name: CRDA scan Java Example
on: [ push, workflow_dispatch, pull_request ]
jobs:
  test:
    runs-on: ubuntu-20.04
    name: Analyse Java project
    env:
      MVN_REPO_DIR: ~/.m2/repository
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - run: |
          echo ${{ github.ref }}
          echo ${{ github.SHA }}
          echo ${{ github.head_ref }}
          echo ${{ github.base_ref }}

      # If none of these files has changed, we assume that the contents of .m2/repository can be fetched from the cache.
      - name: Hash Maven files
        run: |
          echo "MVN_HASH=${{ hashFiles('pom.xml', '.mvn/**/*', 'mvnw*') }}" >> $GITHUB_ENV

      # Download the m2 repository from the cache to speed up the build.
      - name: Check for Maven cache
        id: check-mvn-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.MVN_REPO_DIR }}
          key: ${{ env.MVN_HASH }}

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - run: java -version

      - run: mvn -ntp -B package

      # If there was no cache hit above, store the output into the cache now.
      - name: Save Maven repo into cache
        if: ${{ steps.check-mvn-cache.outputs.cache-hit }} != 'true'
        uses: actions/cache@v2
        with:
          path: ${{ env.MVN_REPO_DIR }}
          key: ${{ env.MVN_HASH }}

      - name: Install CRDA
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: github
          github_pat: ${{ github.token }}
          crda: "latest"

      - name: CRDA Scan
        id: scan
        uses: redhat-actions/crda@main
        with:
          manifest_file_path: pom.xml
          crda_key: fed5df15-7f18-42d1-aa7d-b6c36aa27d4e
          fail_on_vulnerability: false
          upload_sarif: false

      - name: Echo Report Link
        run: echo ${{ steps.scan.outputs.report_link }}

      - name: Upload result to GitHub Code Scanning
        if: ${{ steps.scan.outputs.crda_report_sarif }}
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.crda_report_sarif }}

      - name: Save intermediate files
        run: |
          mkdir -p uploads
          mv ${{ steps.scan.outputs.crda_report_json }} uploads
          mv ${{ steps.scan.outputs.crda_report_sarif }} uploads

      - name: Upload merged Results
        uses: actions/upload-artifact@v2
        with:
          name: workfiles
          path: ./uploads
